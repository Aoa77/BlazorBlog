@*
    <EmbeddedMedia /> is a component that displays an image or video with a link to the media file.
*@
@inherits BlogArticleChild
@inject IJSRuntime JS

<embedded-media class="@CssClass">

    <a target="_image"
       href="@_src"
       style="@_aStyle">

        <img src="@_src"
             width="@_width"
             height="@_height"
             data-size="@_mediaSize.ToJson()"
             data-flex="@_flexSizer?.ToJson()" />
    </a>

    <video width="@_width"
           height="@_height"
           data-size="@_mediaSize.ToJson()"
           data-flex="@_flexSizer?.ToJson()"
           controls>

        <source src="@_src" type="video/mp4" />
        Your browser does not support the video tag.
    </video>
</embedded-media>

@code {
    private bool _isVideo = false;
    private string _aStyle = "";
    private string _src = null!;
    private double _width = 0;
    private double _height = 0;
    private MediaSize _mediaSize = null!;
    private FlexSizer? _flexSizer = null;

    [Parameter] public string? CssClass { get; set; }
    [Parameter] public required string MediaFile { get; set; } = "";
    [Parameter] public string? MediaPath { get; set; } = null;
    [Parameter] public string? MediaType { get; set; } = null;
    [Parameter] public double Width { get; set; } = 25;
    [Parameter] public double Height { get; set; } = 25;
    [Parameter] public double Scale { get; set; } = 1.0;
    [Parameter] public double? AltFlexScale { get; set; }
    [Parameter] public double? MinimumFlexWidth { get; set; }

    protected override void OnInitialized()
    {
        if (MediaPath is null && Article is not null)
        {
            MediaPath = Article.ContentPath;
        }

        if (MediaPath is null)
        {
            throw new ArgumentNullException(nameof(MediaPath));
        }

        _isVideo = MediaFile.EndsWith(".mp4");
        MediaType = _isVideo ? "media-video" : "media-image";

        CssClass = $"{MediaType} {CssClass}";

        _src = $@"/{MediaPath.Trim('/')}/{MediaFile.Trim('/')}";
        _mediaSize = new() { Width = Width, Height = Height, Scale = Scale };
        if (MinimumFlexWidth is not null)
        {
            _flexSizer = new() { MinimumFlexWidth = MinimumFlexWidth.Value };
            _mediaSize.AltFlexScale = AltFlexScale;
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        var viewWidth = await JS.GetViewWidth();
        var scale = _mediaSize.Scale;

        if (_flexSizer is not null && _mediaSize.AltFlexScale is not null)
        {
            if (viewWidth < _flexSizer.MinimumFlexWidth)
            {
                scale = _mediaSize.AltFlexScale.Value;
            }
        }

        var maxWidth = scale * viewWidth;
        var ratio = maxWidth / _mediaSize.Width;

        _width = _mediaSize.Width * ratio;
        _height = _mediaSize.Height * ratio;

        if (!_isVideo)
        {
            var aWidth = _width;
            var aHeight = _height;

            var borderRem = await JS.GetRootVariable("--embedded_media_image_link_border");
            var borderPx = 2 * (await JS.ConvertRemToPixels(borderRem));

            aWidth += borderPx;
            aHeight += borderPx;

            _aStyle = $@"width: {aWidth}px; height: {aHeight}px;";
        }

        StateHasChanged();
    }

}
